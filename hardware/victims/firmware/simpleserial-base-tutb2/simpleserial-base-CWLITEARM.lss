
simpleserial-base-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001244  08001244  00011244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001258  08001258  00011260  2**0
                  CONTENTS
  4 .ARM          00000000  08001258  08001258  00011260  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001258  08001260  00011260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000000  08001260  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000110  08001260  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035e6  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000091a  00000000  00000000  00014876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015f7  00000000  00000000  00015190  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00016787  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d8  00000000  00000000  000168df  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000e42  00000000  00000000  00016bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000128c  00000000  00000000  000179f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  00018c85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000434  00000000  00000000  00018cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  00019128  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0001926c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800122c 	.word	0x0800122c

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4808      	ldr	r0, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	20000004 	.word	0x20000004
 80001d8:	0800122c 	.word	0x0800122c
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000

080001e4 <reset>:

uint8_t reset(uint8_t* x)
{
	// Reset key here if needed
	return 0x00;
}
 80001e4:	2000      	movs	r0, #0
 80001e6:	4770      	bx	lr

080001e8 <get_pt>:
	// Load key here
	return 0x00;
}

uint8_t get_pt(uint8_t* pt)
{
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4602      	mov	r2, r0
	/**********************************
	* Start user-specific code here. */
	//trigger_high();

	asm volatile (
 80001ec:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <get_pt+0x40>)
 80001f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80001fa:	6011      	str	r1, [r2, #0]
 80001fc:	4c0b      	ldr	r4, [pc, #44]	; (800022c <get_pt+0x44>)
 80001fe:	4d0c      	ldr	r5, [pc, #48]	; (8000230 <get_pt+0x48>)
 8000200:	4e0a      	ldr	r6, [pc, #40]	; (800022c <get_pt+0x44>)
 8000202:	4f0c      	ldr	r7, [pc, #48]	; (8000234 <get_pt+0x4c>)
 8000204:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8000238 <get_pt+0x50>
 8000208:	f8df 9030 	ldr.w	r9, [pc, #48]	; 800023c <get_pt+0x54>
 800020c:	f8df a030 	ldr.w	sl, [pc, #48]	; 8000240 <get_pt+0x58>
 8000210:	f8df b030 	ldr.w	fp, [pc, #48]	; 8000244 <get_pt+0x5c>
 8000214:	f8df c030 	ldr.w	ip, [pc, #48]	; 8000248 <get_pt+0x60>
	);
	*/

	//trigger_low();
	
	asm volatile (
 8000218:	6013      	str	r3, [r2, #0]
	::
	);

	/* End user-specific code here. *
	********************************/
	simpleserial_put('r', 16, pt);
 800021a:	2110      	movs	r1, #16
 800021c:	2072      	movs	r0, #114	; 0x72
 800021e:	f000 f895 	bl	800034c <simpleserial_put>
	return 0x00;
}
 8000222:	2000      	movs	r0, #0
 8000224:	bd08      	pop	{r3, pc}
 8000226:	0000      	.short	0x0000
 8000228:	48000018 	.word	0x48000018
 800022c:	0089a002 	.word	0x0089a002
 8000230:	00b32acc 	.word	0x00b32acc
 8000234:	0089aa02 	.word	0x0089aa02
 8000238:	0089a0a2 	.word	0x0089a0a2
 800023c:	0089b002 	.word	0x0089b002
 8000240:	008ca002 	.word	0x008ca002
 8000244:	0009a002 	.word	0x0009a002
 8000248:	00a9a002 	.word	0x00a9a002

0800024c <get_key>:
 800024c:	2000      	movs	r0, #0
 800024e:	4770      	bx	lr

08000250 <main>:
	// Reset key here if needed
	return 0x00;
}

int main(void)
{
 8000250:	b508      	push	{r3, lr}
    platform_init();
 8000252:	f000 f8e1 	bl	8000418 <platform_init>
	init_uart();	
 8000256:	f000 f8f9 	bl	800044c <init_uart>
	trigger_setup();
 800025a:	f000 f933 	bl	80004c4 <trigger_setup>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 800025e:	f000 f86d 	bl	800033c <simpleserial_init>
	simpleserial_addcmd('k', 16, get_key);
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <main+0x38>)
 8000264:	2110      	movs	r1, #16
 8000266:	206b      	movs	r0, #107	; 0x6b
 8000268:	f000 f852 	bl	8000310 <simpleserial_addcmd>
	simpleserial_addcmd('p', 16, get_pt);
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <main+0x3c>)
 800026e:	2110      	movs	r1, #16
 8000270:	2070      	movs	r0, #112	; 0x70
 8000272:	f000 f84d 	bl	8000310 <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 8000276:	4a06      	ldr	r2, [pc, #24]	; (8000290 <main+0x40>)
 8000278:	2100      	movs	r1, #0
 800027a:	2078      	movs	r0, #120	; 0x78
 800027c:	f000 f848 	bl	8000310 <simpleserial_addcmd>
	while(1)
		simpleserial_get();
 8000280:	f000 f886 	bl	8000390 <simpleserial_get>
 8000284:	e7fc      	b.n	8000280 <main+0x30>
 8000286:	bf00      	nop
 8000288:	0800024d 	.word	0x0800024d
 800028c:	080001e9 	.word	0x080001e9
 8000290:	080001e5 	.word	0x080001e5

08000294 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t* v)
{
	return 0x00;
}
 8000294:	2000      	movs	r0, #0
 8000296:	4770      	bx	lr

08000298 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
 800029c:	4613      	mov	r3, r2
 800029e:	1a9c      	subs	r4, r3, r2
 80002a0:	42a0      	cmp	r0, r4
 80002a2:	dd32      	ble.n	800030a <hex_decode+0x72>
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 80002a4:	780d      	ldrb	r5, [r1, #0]

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
	for(int i = 0; i < len; i++)
	{
		char n_hi = ascii_buf[2*i];
 80002a6:	f811 4c01 	ldrb.w	r4, [r1, #-1]
		char n_lo = ascii_buf[2*i+1];

		if(n_lo >= '0' && n_lo <= '9')
 80002aa:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 80002ae:	b2f6      	uxtb	r6, r6
 80002b0:	2e09      	cmp	r6, #9
 80002b2:	d801      	bhi.n	80002b8 <hex_decode+0x20>
			data_buf[i] = n_lo - '0';
 80002b4:	701e      	strb	r6, [r3, #0]
 80002b6:	e00d      	b.n	80002d4 <hex_decode+0x3c>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80002b8:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 80002bc:	2e05      	cmp	r6, #5
 80002be:	d801      	bhi.n	80002c4 <hex_decode+0x2c>
			data_buf[i] = n_lo - 'A' + 10;
 80002c0:	3d37      	subs	r5, #55	; 0x37
 80002c2:	e006      	b.n	80002d2 <hex_decode+0x3a>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80002c4:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 80002c8:	2e05      	cmp	r6, #5
 80002ca:	d901      	bls.n	80002d0 <hex_decode+0x38>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 80002cc:	2001      	movs	r0, #1
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
		if(n_lo >= '0' && n_lo <= '9')
			data_buf[i] = n_lo - '0';
		else if(n_lo >= 'A' && n_lo <= 'F')
			data_buf[i] = n_lo - 'A' + 10;
		else if(n_lo >= 'a' && n_lo <= 'f')
			data_buf[i] = n_lo - 'a' + 10;
 80002d0:	3d57      	subs	r5, #87	; 0x57
 80002d2:	701d      	strb	r5, [r3, #0]
		else
			return 1;

		if(n_hi >= '0' && n_hi <= '9')
 80002d4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80002d8:	b2ee      	uxtb	r6, r5
 80002da:	2e09      	cmp	r6, #9
 80002dc:	d803      	bhi.n	80002e6 <hex_decode+0x4e>
			data_buf[i] |= (n_hi - '0') << 4;
 80002de:	781c      	ldrb	r4, [r3, #0]
 80002e0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80002e4:	e00d      	b.n	8000302 <hex_decode+0x6a>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80002e6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80002ea:	2d05      	cmp	r5, #5
 80002ec:	d801      	bhi.n	80002f2 <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80002ee:	3c37      	subs	r4, #55	; 0x37
 80002f0:	e004      	b.n	80002fc <hex_decode+0x64>
		else if(n_hi >= 'a' && n_hi <= 'f')
 80002f2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80002f6:	2d05      	cmp	r5, #5
 80002f8:	d8e8      	bhi.n	80002cc <hex_decode+0x34>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80002fa:	3c57      	subs	r4, #87	; 0x57
 80002fc:	781d      	ldrb	r5, [r3, #0]
 80002fe:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8000302:	701c      	strb	r4, [r3, #0]
 8000304:	3102      	adds	r1, #2
 8000306:	3301      	adds	r3, #1
 8000308:	e7c9      	b.n	800029e <hex_decode+0x6>
		else
			return 1;
	}

	return 0;
 800030a:	2000      	movs	r0, #0
}
 800030c:	bd70      	pop	{r4, r5, r6, pc}
 800030e:	0000      	movs	r0, r0

08000310 <simpleserial_addcmd>:
{
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
 8000310:	b530      	push	{r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS)
 8000312:	4d09      	ldr	r5, [pc, #36]	; (8000338 <simpleserial_addcmd+0x28>)
 8000314:	682b      	ldr	r3, [r5, #0]
 8000316:	2b09      	cmp	r3, #9
 8000318:	dc0b      	bgt.n	8000332 <simpleserial_addcmd+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 800031a:	293f      	cmp	r1, #63	; 0x3f
 800031c:	d809      	bhi.n	8000332 <simpleserial_addcmd+0x22>
		return 1;

	commands[num_commands].c   = c;
 800031e:	240c      	movs	r4, #12
 8000320:	fb04 5403 	mla	r4, r4, r3, r5
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;
 8000324:	3301      	adds	r3, #1
		return 1;

	if(len >= MAX_SS_LEN)
		return 1;

	commands[num_commands].c   = c;
 8000326:	7120      	strb	r0, [r4, #4]
	commands[num_commands].len = len;
 8000328:	60a1      	str	r1, [r4, #8]
	commands[num_commands].fp  = fp;
 800032a:	60e2      	str	r2, [r4, #12]
	num_commands++;
 800032c:	602b      	str	r3, [r5, #0]

	return 0;
 800032e:	2000      	movs	r0, #0
 8000330:	bd30      	pop	{r4, r5, pc}
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
	if(num_commands >= MAX_SS_CMDS)
		return 1;
 8000332:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	bf00      	nop
 8000338:	2000001c 	.word	0x2000001c

0800033c <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
	simpleserial_addcmd('v', 0, check_version);
 800033c:	4a02      	ldr	r2, [pc, #8]	; (8000348 <simpleserial_init+0xc>)
 800033e:	2100      	movs	r1, #0
 8000340:	2076      	movs	r0, #118	; 0x76
 8000342:	f7ff bfe5 	b.w	8000310 <simpleserial_addcmd>
 8000346:	bf00      	nop
 8000348:	08000295 	.word	0x08000295

0800034c <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, int size, uint8_t* output)
{
 800034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000350:	4615      	mov	r5, r2
 8000352:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 8000354:	f000 f8ec 	bl	8000530 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000358:	4e0c      	ldr	r6, [pc, #48]	; (800038c <simpleserial_put+0x40>)
{
	// Write first character
	putch(c);

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 800035a:	462c      	mov	r4, r5
 800035c:	1b63      	subs	r3, r4, r5
 800035e:	429f      	cmp	r7, r3
 8000360:	dd0e      	ble.n	8000380 <simpleserial_put+0x34>
 8000362:	46a0      	mov	r8, r4
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000364:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000368:	091b      	lsrs	r3, r3, #4
 800036a:	5cf0      	ldrb	r0, [r6, r3]
 800036c:	f000 f8e0 	bl	8000530 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000370:	f898 3000 	ldrb.w	r3, [r8]
 8000374:	f003 030f 	and.w	r3, r3, #15
 8000378:	5cf0      	ldrb	r0, [r6, r3]
 800037a:	f000 f8d9 	bl	8000530 <putch>
 800037e:	e7ed      	b.n	800035c <simpleserial_put+0x10>
	}

	// Write trailing '\n'
	putch('\n');
 8000380:	200a      	movs	r0, #10
}
 8000382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
 8000386:	f000 b8d3 	b.w	8000530 <putch>
 800038a:	bf00      	nop
 800038c:	08001244 	.word	0x08001244

08000390 <simpleserial_get>:

	return 0;
}

void simpleserial_get(void)
{
 8000390:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 8000392:	4d20      	ldr	r5, [pc, #128]	; (8000414 <simpleserial_get+0x84>)

	return 0;
}

void simpleserial_get(void)
{
 8000394:	b0b3      	sub	sp, #204	; 0xcc
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 8000396:	f000 f8b9 	bl	800050c <getch>

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 800039a:	682b      	ldr	r3, [r5, #0]
 800039c:	2400      	movs	r4, #0
	{
		if(commands[cmd].c == c)
 800039e:	1d2a      	adds	r2, r5, #4
 80003a0:	210c      	movs	r1, #12

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 80003a2:	429c      	cmp	r4, r3
 80003a4:	da0b      	bge.n	80003be <simpleserial_get+0x2e>
	{
		if(commands[cmd].c == c)
 80003a6:	fb01 f604 	mul.w	r6, r1, r4
 80003aa:	5cb6      	ldrb	r6, [r6, r2]
 80003ac:	4286      	cmp	r6, r0
 80003ae:	d104      	bne.n	80003ba <simpleserial_get+0x2a>
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80003b0:	270c      	movs	r7, #12
 80003b2:	2600      	movs	r6, #0
 80003b4:	fb07 5704 	mla	r7, r7, r4, r5
 80003b8:	e00c      	b.n	80003d4 <simpleserial_get+0x44>

	// Find which command we're receiving
	c = getch();

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 80003ba:	3401      	adds	r4, #1
 80003bc:	e7f1      	b.n	80003a2 <simpleserial_get+0x12>
		if(commands[cmd].c == c)
			break;
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 80003be:	d026      	beq.n	800040e <simpleserial_get+0x7e>
 80003c0:	e7f6      	b.n	80003b0 <simpleserial_get+0x20>
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
	{
		c = getch();
 80003c2:	f000 f8a3 	bl	800050c <getch>

		// Check for early \n
		if(c == '\n' || c == '\r')
 80003c6:	280a      	cmp	r0, #10
 80003c8:	d021      	beq.n	800040e <simpleserial_get+0x7e>
 80003ca:	280d      	cmp	r0, #13
 80003cc:	d01f      	beq.n	800040e <simpleserial_get+0x7e>
			return;

		ascii_buf[i] = c;
 80003ce:	ab12      	add	r3, sp, #72	; 0x48
 80003d0:	54f0      	strb	r0, [r6, r3]
	// If we didn't find a match, give up right away
	if(cmd == num_commands)
		return;

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80003d2:	3601      	adds	r6, #1
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 80003da:	d3f2      	bcc.n	80003c2 <simpleserial_get+0x32>

		ascii_buf[i] = c;
	}

	// Assert that last character is \n or \r
	c = getch();
 80003dc:	f000 f896 	bl	800050c <getch>
	if(c != '\n' && c != '\r')
 80003e0:	280a      	cmp	r0, #10
 80003e2:	d001      	beq.n	80003e8 <simpleserial_get+0x58>
 80003e4:	280d      	cmp	r0, #13
 80003e6:	d112      	bne.n	800040e <simpleserial_get+0x7e>
		return;

	// ASCII buffer is full: convert to bytes 
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80003e8:	230c      	movs	r3, #12
 80003ea:	fb03 5404 	mla	r4, r3, r4, r5
 80003ee:	aa02      	add	r2, sp, #8
 80003f0:	a912      	add	r1, sp, #72	; 0x48
 80003f2:	68a0      	ldr	r0, [r4, #8]
 80003f4:	f7ff ff50 	bl	8000298 <hex_decode>
 80003f8:	b948      	cbnz	r0, 800040e <simpleserial_get+0x7e>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 80003fa:	68e3      	ldr	r3, [r4, #12]
 80003fc:	a802      	add	r0, sp, #8
 80003fe:	4798      	blx	r3
 8000400:	aa32      	add	r2, sp, #200	; 0xc8
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 8000402:	2101      	movs	r1, #1
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf);
 8000404:	f802 0dc4 	strb.w	r0, [r2, #-196]!
	
	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 8000408:	207a      	movs	r0, #122	; 0x7a
 800040a:	f7ff ff9f 	bl	800034c <simpleserial_put>
#endif
}
 800040e:	b033      	add	sp, #204	; 0xcc
 8000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000412:	bf00      	nop
 8000414:	2000001c 	.word	0x2000001c

08000418 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000418:	b510      	push	{r4, lr}
 800041a:	b090      	sub	sp, #64	; 0x40
	//HAL_Init();

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 800041c:	2303      	movs	r3, #3
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800041e:	2400      	movs	r4, #0
void platform_init(void)
{
	//HAL_Init();

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000420:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000422:	a806      	add	r0, sp, #24
{
	//HAL_Init();

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000424:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000428:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800042a:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800042c:	940e      	str	r4, [sp, #56]	; 0x38
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800042e:	f000 f897 	bl	8000560 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000432:	230f      	movs	r3, #15
 8000434:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	uint32_t flash_latency = 5;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000436:	2105      	movs	r1, #5
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000438:	2301      	movs	r3, #1
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	uint32_t flash_latency = 5;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800043a:	a801      	add	r0, sp, #4
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800043c:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800043e:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000440:	9404      	str	r4, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	9405      	str	r4, [sp, #20]
	uint32_t flash_latency = 5;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000444:	f000 fafe 	bl	8000a44 <HAL_RCC_ClockConfig>
}
 8000448:	b010      	add	sp, #64	; 0x40
 800044a:	bd10      	pop	{r4, pc}

0800044c <init_uart>:

void init_uart(void)
{
 800044c:	b510      	push	{r4, lr}
 800044e:	b088      	sub	sp, #32
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000450:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000454:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000456:	2302      	movs	r3, #2
 8000458:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 800045a:	2301      	movs	r3, #1
 800045c:	9305      	str	r3, [sp, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 8000460:	4c15      	ldr	r4, [pc, #84]	; (80004b8 <init_uart+0x6c>)
{
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000462:	9306      	str	r3, [sp, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000464:	2307      	movs	r3, #7
 8000466:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8000468:	6963      	ldr	r3, [r4, #20]
 800046a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046e:	6163      	str	r3, [r4, #20]
 8000470:	6963      	ldr	r3, [r4, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000478:	a903      	add	r1, sp, #12
 800047a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 800047e:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000480:	f000 fb84 	bl	8000b8c <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8000484:	480d      	ldr	r0, [pc, #52]	; (80004bc <init_uart+0x70>)
	UartHandle.Init.BaudRate   = 38400;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <init_uart+0x74>)
 8000488:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 800048c:	e880 4008 	stmia.w	r0, {r3, lr}
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000490:	2300      	movs	r3, #0
 8000492:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000494:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000496:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000498:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800049a:	230c      	movs	r3, #12
 800049c:	6143      	str	r3, [r0, #20]
	__USART1_CLK_ENABLE();
 800049e:	69a3      	ldr	r3, [r4, #24]
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a4:	61a3      	str	r3, [r4, #24]
 80004a6:	69a3      	ldr	r3, [r4, #24]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	9302      	str	r3, [sp, #8]
 80004ae:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 80004b0:	f000 fd82 	bl	8000fb8 <HAL_UART_Init>
}
 80004b4:	b008      	add	sp, #32
 80004b6:	bd10      	pop	{r4, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	200000a0 	.word	0x200000a0
 80004c0:	40013800 	.word	0x40013800

080004c4 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <trigger_setup+0x44>)
	__USART1_CLK_ENABLE();
	HAL_UART_Init(&UartHandle);
}

void trigger_setup(void)
{
 80004c6:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	695b      	ldr	r3, [r3, #20]
	__USART1_CLK_ENABLE();
	HAL_UART_Init(&UartHandle);
}

void trigger_setup(void)
{
 80004d2:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	9b00      	ldr	r3, [sp, #0]
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004dc:	2301      	movs	r3, #1
void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 80004de:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80004e2:	9302      	str	r3, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 80004e4:	2500      	movs	r5, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004e8:	a901      	add	r1, sp, #4
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80004ee:	9304      	str	r3, [sp, #16]
void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 80004f0:	9401      	str	r4, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
 80004f2:	9503      	str	r5, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80004f4:	f000 fb4a 	bl	8000b8c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80004f8:	462a      	mov	r2, r5
 80004fa:	4621      	mov	r1, r4
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fc0e 	bl	8000d20 <HAL_GPIO_WritePin>
}
 8000504:	b007      	add	sp, #28
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <getch>:
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
}   

char getch(void)
{
 800050c:	b507      	push	{r0, r1, r2, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 800050e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000512:	2201      	movs	r2, #1
 8000514:	f10d 0107 	add.w	r1, sp, #7
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <getch+0x20>)
 800051a:	f000 fdd0 	bl	80010be <HAL_UART_Receive>
 800051e:	2800      	cmp	r0, #0
 8000520:	d1f5      	bne.n	800050e <getch+0x2>
	return d;
}
 8000522:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000526:	b003      	add	sp, #12
 8000528:	f85d fb04 	ldr.w	pc, [sp], #4
 800052c:	200000a0 	.word	0x200000a0

08000530 <putch>:

void putch(char c)
{
 8000530:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 8000532:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000534:	f241 3388 	movw	r3, #5000	; 0x1388
	return d;
}

void putch(char c)
{
	uint8_t d  = c;
 8000538:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800053c:	2201      	movs	r2, #1
 800053e:	4803      	ldr	r0, [pc, #12]	; (800054c <putch+0x1c>)
 8000540:	f000 fd65 	bl	800100e <HAL_UART_Transmit>
}
 8000544:	b003      	add	sp, #12
 8000546:	f85d fb04 	ldr.w	pc, [sp], #4
 800054a:	bf00      	nop
 800054c:	200000a0 	.word	0x200000a0

08000550 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <HAL_GetTick+0xc>)
 8000552:	6818      	ldr	r0, [r3, #0]
 8000554:	1c42      	adds	r2, r0, #1
 8000556:	601a      	str	r2, [r3, #0]
}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000098 	.word	0x20000098

08000560 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000560:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000562:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000566:	07d9      	lsls	r1, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000568:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056a:	d403      	bmi.n	8000574 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	079a      	lsls	r2, r3, #30
 8000570:	d474      	bmi.n	800065c <HAL_RCC_OscConfig+0xfc>
 8000572:	e0f4      	b.n	800075e <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000574:	49b6      	ldr	r1, [pc, #728]	; (8000850 <HAL_RCC_OscConfig+0x2f0>)
 8000576:	684b      	ldr	r3, [r1, #4]
 8000578:	f003 030c 	and.w	r3, r3, #12
 800057c:	2b04      	cmp	r3, #4
 800057e:	d007      	beq.n	8000590 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000580:	684b      	ldr	r3, [r1, #4]
 8000582:	f003 030c 	and.w	r3, r3, #12
 8000586:	2b08      	cmp	r3, #8
 8000588:	d117      	bne.n	80005ba <HAL_RCC_OscConfig+0x5a>
 800058a:	684b      	ldr	r3, [r1, #4]
 800058c:	03db      	lsls	r3, r3, #15
 800058e:	d514      	bpl.n	80005ba <HAL_RCC_OscConfig+0x5a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000594:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000598:	6809      	ldr	r1, [r1, #0]
 800059a:	fa93 f3a3 	rbit	r3, r3
 800059e:	fab3 f383 	clz	r3, r3
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	420b      	tst	r3, r1
 80005ae:	d0dd      	beq.n	800056c <HAL_RCC_OscConfig+0xc>
 80005b0:	6863      	ldr	r3, [r4, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1da      	bne.n	800056c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80005b6:	2001      	movs	r0, #1
 80005b8:	e23e      	b.n	8000a38 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ba:	6863      	ldr	r3, [r4, #4]
 80005bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005c0:	d007      	beq.n	80005d2 <HAL_RCC_OscConfig+0x72>
 80005c2:	680a      	ldr	r2, [r1, #0]
 80005c4:	b14b      	cbz	r3, 80005da <HAL_RCC_OscConfig+0x7a>
 80005c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005ca:	d106      	bne.n	80005da <HAL_RCC_OscConfig+0x7a>
 80005cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005d0:	600a      	str	r2, [r1, #0]
 80005d2:	680a      	ldr	r2, [r1, #0]
 80005d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005d8:	e005      	b.n	80005e6 <HAL_RCC_OscConfig+0x86>
 80005da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005de:	600a      	str	r2, [r1, #0]
 80005e0:	680a      	ldr	r2, [r1, #0]
 80005e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005e6:	600a      	str	r2, [r1, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005e8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80005ea:	f022 000f 	bic.w	r0, r2, #15
 80005ee:	68a2      	ldr	r2, [r4, #8]
 80005f0:	4302      	orrs	r2, r0
 80005f2:	62ca      	str	r2, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005f4:	b1cb      	cbz	r3, 800062a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005f6:	f7ff ffab 	bl	8000550 <HAL_GetTick>
 80005fa:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80005fe:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000600:	2601      	movs	r6, #1
 8000602:	fa95 f3a5 	rbit	r3, r5
 8000606:	680a      	ldr	r2, [r1, #0]
 8000608:	fa95 f3a5 	rbit	r3, r5
 800060c:	fab3 f383 	clz	r3, r3
 8000610:	f003 031f 	and.w	r3, r3, #31
 8000614:	fa06 f303 	lsl.w	r3, r6, r3
 8000618:	4213      	tst	r3, r2
 800061a:	d1a7      	bne.n	800056c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800061c:	f7ff ff98 	bl	8000550 <HAL_GetTick>
 8000620:	1bc0      	subs	r0, r0, r7
 8000622:	2864      	cmp	r0, #100	; 0x64
 8000624:	d9ed      	bls.n	8000602 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8000626:	2003      	movs	r0, #3
 8000628:	e206      	b.n	8000a38 <HAL_RCC_OscConfig+0x4d8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800062a:	f7ff ff91 	bl	8000550 <HAL_GetTick>
 800062e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000632:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000634:	2601      	movs	r6, #1
 8000636:	fa95 f3a5 	rbit	r3, r5
 800063a:	680a      	ldr	r2, [r1, #0]
 800063c:	fa95 f3a5 	rbit	r3, r5
 8000640:	fab3 f383 	clz	r3, r3
 8000644:	f003 031f 	and.w	r3, r3, #31
 8000648:	fa06 f303 	lsl.w	r3, r6, r3
 800064c:	4213      	tst	r3, r2
 800064e:	d08d      	beq.n	800056c <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000650:	f7ff ff7e 	bl	8000550 <HAL_GetTick>
 8000654:	1bc0      	subs	r0, r0, r7
 8000656:	2864      	cmp	r0, #100	; 0x64
 8000658:	d9ed      	bls.n	8000636 <HAL_RCC_OscConfig+0xd6>
 800065a:	e7e4      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800065c:	497c      	ldr	r1, [pc, #496]	; (8000850 <HAL_RCC_OscConfig+0x2f0>)
 800065e:	684b      	ldr	r3, [r1, #4]
 8000660:	f013 0f0c 	tst.w	r3, #12
 8000664:	d007      	beq.n	8000676 <HAL_RCC_OscConfig+0x116>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000666:	684b      	ldr	r3, [r1, #4]
 8000668:	f003 030c 	and.w	r3, r3, #12
 800066c:	2b08      	cmp	r3, #8
 800066e:	d122      	bne.n	80006b6 <HAL_RCC_OscConfig+0x156>
 8000670:	684b      	ldr	r3, [r1, #4]
 8000672:	03df      	lsls	r7, r3, #15
 8000674:	d41f      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x156>
 8000676:	2302      	movs	r3, #2
 8000678:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800067c:	6808      	ldr	r0, [r1, #0]
 800067e:	fa93 f3a3 	rbit	r3, r3
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	f003 031f 	and.w	r3, r3, #31
 800068a:	2201      	movs	r2, #1
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	4203      	tst	r3, r0
 8000692:	d002      	beq.n	800069a <HAL_RCC_OscConfig+0x13a>
 8000694:	6923      	ldr	r3, [r4, #16]
 8000696:	4293      	cmp	r3, r2
 8000698:	d18d      	bne.n	80005b6 <HAL_RCC_OscConfig+0x56>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069a:	680b      	ldr	r3, [r1, #0]
 800069c:	22f8      	movs	r2, #248	; 0xf8
 800069e:	fa92 f2a2 	rbit	r2, r2
 80006a2:	6960      	ldr	r0, [r4, #20]
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	fa00 f202 	lsl.w	r2, r0, r2
 80006ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006b0:	4313      	orrs	r3, r2
 80006b2:	600b      	str	r3, [r1, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b4:	e053      	b.n	800075e <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006b6:	6922      	ldr	r2, [r4, #16]
 80006b8:	2501      	movs	r5, #1
 80006ba:	b37a      	cbz	r2, 800071c <HAL_RCC_OscConfig+0x1bc>
 80006bc:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006c0:	fab3 f383 	clz	r3, r3
 80006c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	2602      	movs	r6, #2
 80006d0:	601d      	str	r5, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006d2:	f7ff ff3d 	bl	8000550 <HAL_GetTick>
 80006d6:	4607      	mov	r7, r0
 80006d8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006dc:	485c      	ldr	r0, [pc, #368]	; (8000850 <HAL_RCC_OscConfig+0x2f0>)
 80006de:	680a      	ldr	r2, [r1, #0]
 80006e0:	fa96 f3a6 	rbit	r3, r6
 80006e4:	fab3 f383 	clz	r3, r3
 80006e8:	f003 031f 	and.w	r3, r3, #31
 80006ec:	fa05 f303 	lsl.w	r3, r5, r3
 80006f0:	4213      	tst	r3, r2
 80006f2:	d105      	bne.n	8000700 <HAL_RCC_OscConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f4:	f7ff ff2c 	bl	8000550 <HAL_GetTick>
 80006f8:	1bc0      	subs	r0, r0, r7
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9ec      	bls.n	80006d8 <HAL_RCC_OscConfig+0x178>
 80006fe:	e792      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000700:	6803      	ldr	r3, [r0, #0]
 8000702:	22f8      	movs	r2, #248	; 0xf8
 8000704:	fa92 f2a2 	rbit	r2, r2
 8000708:	6961      	ldr	r1, [r4, #20]
 800070a:	fab2 f282 	clz	r2, r2
 800070e:	fa01 f202 	lsl.w	r2, r1, r2
 8000712:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000716:	4313      	orrs	r3, r2
 8000718:	6003      	str	r3, [r0, #0]
 800071a:	e020      	b.n	800075e <HAL_RCC_OscConfig+0x1fe>
 800071c:	fa95 f3a5 	rbit	r3, r5
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	2602      	movs	r6, #2
 8000730:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000732:	f7ff ff0d 	bl	8000550 <HAL_GetTick>
 8000736:	4607      	mov	r7, r0
 8000738:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800073c:	680a      	ldr	r2, [r1, #0]
 800073e:	fa96 f3a6 	rbit	r3, r6
 8000742:	fab3 f383 	clz	r3, r3
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	fa05 f303 	lsl.w	r3, r5, r3
 800074e:	4213      	tst	r3, r2
 8000750:	d005      	beq.n	800075e <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000752:	f7ff fefd 	bl	8000550 <HAL_GetTick>
 8000756:	1bc0      	subs	r0, r0, r7
 8000758:	2802      	cmp	r0, #2
 800075a:	d9ed      	bls.n	8000738 <HAL_RCC_OscConfig+0x1d8>
 800075c:	e763      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800075e:	6823      	ldr	r3, [r4, #0]
 8000760:	071e      	lsls	r6, r3, #28
 8000762:	d403      	bmi.n	800076c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	075d      	lsls	r5, r3, #29
 8000768:	d44a      	bmi.n	8000800 <HAL_RCC_OscConfig+0x2a0>
 800076a:	e0de      	b.n	800092a <HAL_RCC_OscConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800076c:	69a0      	ldr	r0, [r4, #24]
 800076e:	4d38      	ldr	r5, [pc, #224]	; (8000850 <HAL_RCC_OscConfig+0x2f0>)
 8000770:	2101      	movs	r1, #1
 8000772:	b310      	cbz	r0, 80007ba <HAL_RCC_OscConfig+0x25a>
 8000774:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000778:	4b36      	ldr	r3, [pc, #216]	; (8000854 <HAL_RCC_OscConfig+0x2f4>)
 800077a:	fab2 f282 	clz	r2, r2
 800077e:	4413      	add	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	2602      	movs	r6, #2
 8000784:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000786:	f7ff fee3 	bl	8000550 <HAL_GetTick>
 800078a:	4607      	mov	r7, r0
 800078c:	fa96 f3a6 	rbit	r3, r6
 8000790:	fa96 f3a6 	rbit	r3, r6
 8000794:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000798:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800079a:	fa96 f3a6 	rbit	r3, r6
 800079e:	fab3 f383 	clz	r3, r3
 80007a2:	f003 031f 	and.w	r3, r3, #31
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	4213      	tst	r3, r2
 80007ac:	d1da      	bne.n	8000764 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ae:	f7ff fecf 	bl	8000550 <HAL_GetTick>
 80007b2:	1bc0      	subs	r0, r0, r7
 80007b4:	2802      	cmp	r0, #2
 80007b6:	d9e9      	bls.n	800078c <HAL_RCC_OscConfig+0x22c>
 80007b8:	e735      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
 80007ba:	fa91 f2a1 	rbit	r2, r1
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <HAL_RCC_OscConfig+0x2f4>)
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	2602      	movs	r6, #2
 80007ca:	6018      	str	r0, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007cc:	f7ff fec0 	bl	8000550 <HAL_GetTick>
 80007d0:	4607      	mov	r7, r0
 80007d2:	fa96 f3a6 	rbit	r3, r6
 80007d6:	fa96 f3a6 	rbit	r3, r6
 80007da:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007e0:	fa96 f3a6 	rbit	r3, r6
 80007e4:	fab3 f383 	clz	r3, r3
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4213      	tst	r3, r2
 80007f2:	d0b7      	beq.n	8000764 <HAL_RCC_OscConfig+0x204>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f4:	f7ff feac 	bl	8000550 <HAL_GetTick>
 80007f8:	1bc0      	subs	r0, r0, r7
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9e9      	bls.n	80007d2 <HAL_RCC_OscConfig+0x272>
 80007fe:	e712      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000800:	4913      	ldr	r1, [pc, #76]	; (8000850 <HAL_RCC_OscConfig+0x2f0>)
 8000802:	69cb      	ldr	r3, [r1, #28]
 8000804:	00d8      	lsls	r0, r3, #3
 8000806:	d40a      	bmi.n	800081e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	69cb      	ldr	r3, [r1, #28]
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080e:	61cb      	str	r3, [r1, #28]
 8000810:	69cb      	ldr	r3, [r1, #28]
 8000812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800081a:	2501      	movs	r5, #1
 800081c:	e000      	b.n	8000820 <HAL_RCC_OscConfig+0x2c0>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800081e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000820:	4e0d      	ldr	r6, [pc, #52]	; (8000858 <HAL_RCC_OscConfig+0x2f8>)
 8000822:	6833      	ldr	r3, [r6, #0]
 8000824:	05da      	lsls	r2, r3, #23
 8000826:	d503      	bpl.n	8000830 <HAL_RCC_OscConfig+0x2d0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000828:	68e3      	ldr	r3, [r4, #12]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d116      	bne.n	800085c <HAL_RCC_OscConfig+0x2fc>
 800082e:	e02b      	b.n	8000888 <HAL_RCC_OscConfig+0x328>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000830:	6833      	ldr	r3, [r6, #0]
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000838:	f7ff fe8a 	bl	8000550 <HAL_GetTick>
 800083c:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800083e:	6833      	ldr	r3, [r6, #0]
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	d4f1      	bmi.n	8000828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000844:	f7ff fe84 	bl	8000550 <HAL_GetTick>
 8000848:	1bc0      	subs	r0, r0, r7
 800084a:	2864      	cmp	r0, #100	; 0x64
 800084c:	d9f7      	bls.n	800083e <HAL_RCC_OscConfig+0x2de>
 800084e:	e6ea      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
 8000850:	40021000 	.word	0x40021000
 8000854:	10908120 	.word	0x10908120
 8000858:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800085c:	b973      	cbnz	r3, 800087c <HAL_RCC_OscConfig+0x31c>
 800085e:	6a0b      	ldr	r3, [r1, #32]
 8000860:	f023 0301 	bic.w	r3, r3, #1
 8000864:	620b      	str	r3, [r1, #32]
 8000866:	6a0b      	ldr	r3, [r1, #32]
 8000868:	f023 0304 	bic.w	r3, r3, #4
 800086c:	620b      	str	r3, [r1, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800086e:	f7ff fe6f 	bl	8000550 <HAL_GetTick>
 8000872:	2602      	movs	r6, #2
 8000874:	4681      	mov	r9, r0
 8000876:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000878:	2701      	movs	r7, #1
 800087a:	e03c      	b.n	80008f6 <HAL_RCC_OscConfig+0x396>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087c:	2b05      	cmp	r3, #5
 800087e:	6a0b      	ldr	r3, [r1, #32]
 8000880:	d106      	bne.n	8000890 <HAL_RCC_OscConfig+0x330>
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	620b      	str	r3, [r1, #32]
 8000888:	6a0b      	ldr	r3, [r1, #32]
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	e005      	b.n	800089c <HAL_RCC_OscConfig+0x33c>
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	620b      	str	r3, [r1, #32]
 8000896:	6a0b      	ldr	r3, [r1, #32]
 8000898:	f023 0304 	bic.w	r3, r3, #4
 800089c:	620b      	str	r3, [r1, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800089e:	f7ff fe57 	bl	8000550 <HAL_GetTick>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4681      	mov	r9, r0
 80008a6:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a8:	2701      	movs	r7, #1
 80008aa:	fa96 f3a6 	rbit	r3, r6
 80008ae:	fa96 f3a6 	rbit	r3, r6
 80008b2:	b10b      	cbz	r3, 80008b8 <HAL_RCC_OscConfig+0x358>
 80008b4:	6a0a      	ldr	r2, [r1, #32]
 80008b6:	e002      	b.n	80008be <HAL_RCC_OscConfig+0x35e>
 80008b8:	fa96 f3a6 	rbit	r3, r6
 80008bc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80008be:	fa98 f3a8 	rbit	r3, r8
 80008c2:	fab3 f383 	clz	r3, r3
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	fa07 f303 	lsl.w	r3, r7, r3
 80008ce:	4213      	tst	r3, r2
 80008d0:	d121      	bne.n	8000916 <HAL_RCC_OscConfig+0x3b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d2:	f7ff fe3d 	bl	8000550 <HAL_GetTick>
 80008d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80008da:	ebc9 0000 	rsb	r0, r9, r0
 80008de:	4298      	cmp	r0, r3
 80008e0:	d9e3      	bls.n	80008aa <HAL_RCC_OscConfig+0x34a>
 80008e2:	e6a0      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e4:	f7ff fe34 	bl	8000550 <HAL_GetTick>
 80008e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ec:	ebc9 0000 	rsb	r0, r9, r0
 80008f0:	4298      	cmp	r0, r3
 80008f2:	f63f ae98 	bhi.w	8000626 <HAL_RCC_OscConfig+0xc6>
 80008f6:	fa96 f3a6 	rbit	r3, r6
 80008fa:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008fe:	b183      	cbz	r3, 8000922 <HAL_RCC_OscConfig+0x3c2>
 8000900:	6a0a      	ldr	r2, [r1, #32]
 8000902:	fa98 f3a8 	rbit	r3, r8
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	f003 031f 	and.w	r3, r3, #31
 800090e:	fa07 f303 	lsl.w	r3, r7, r3
 8000912:	4213      	tst	r3, r2
 8000914:	d1e6      	bne.n	80008e4 <HAL_RCC_OscConfig+0x384>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000916:	b145      	cbz	r5, 800092a <HAL_RCC_OscConfig+0x3ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000918:	69cb      	ldr	r3, [r1, #28]
 800091a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091e:	61cb      	str	r3, [r1, #28]
 8000920:	e003      	b.n	800092a <HAL_RCC_OscConfig+0x3ca>
 8000922:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000926:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000928:	e7eb      	b.n	8000902 <HAL_RCC_OscConfig+0x3a2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800092a:	69e2      	ldr	r2, [r4, #28]
 800092c:	b90a      	cbnz	r2, 8000932 <HAL_RCC_OscConfig+0x3d2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800092e:	2000      	movs	r0, #0
 8000930:	e082      	b.n	8000a38 <HAL_RCC_OscConfig+0x4d8>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000932:	4943      	ldr	r1, [pc, #268]	; (8000a40 <HAL_RCC_OscConfig+0x4e0>)
 8000934:	684b      	ldr	r3, [r1, #4]
 8000936:	f003 030c 	and.w	r3, r3, #12
 800093a:	2b08      	cmp	r3, #8
 800093c:	f43f ae3b 	beq.w	80005b6 <HAL_RCC_OscConfig+0x56>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000940:	2a02      	cmp	r2, #2
 8000942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000946:	d153      	bne.n	80009f0 <HAL_RCC_OscConfig+0x490>
 8000948:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800095e:	f7ff fdf7 	bl	8000550 <HAL_GetTick>
 8000962:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000966:	4680      	mov	r8, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000968:	2701      	movs	r7, #1
 800096a:	fa96 f3a6 	rbit	r3, r6
 800096e:	4834      	ldr	r0, [pc, #208]	; (8000a40 <HAL_RCC_OscConfig+0x4e0>)
 8000970:	680a      	ldr	r2, [r1, #0]
 8000972:	fa96 f3a6 	rbit	r3, r6
 8000976:	fab3 f383 	clz	r3, r3
 800097a:	f003 031f 	and.w	r3, r3, #31
 800097e:	fa07 f303 	lsl.w	r3, r7, r3
 8000982:	4213      	tst	r3, r2
 8000984:	f04f 0501 	mov.w	r5, #1
 8000988:	d006      	beq.n	8000998 <HAL_RCC_OscConfig+0x438>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098a:	f7ff fde1 	bl	8000550 <HAL_GetTick>
 800098e:	ebc8 0000 	rsb	r0, r8, r0
 8000992:	2802      	cmp	r0, #2
 8000994:	d9e9      	bls.n	800096a <HAL_RCC_OscConfig+0x40a>
 8000996:	e646      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000998:	6843      	ldr	r3, [r0, #4]
 800099a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800099c:	6a22      	ldr	r2, [r4, #32]
 800099e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80009a2:	4332      	orrs	r2, r6
 80009a4:	4313      	orrs	r3, r2
 80009a6:	6043      	str	r3, [r0, #4]
 80009a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ac:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80009b0:	fab3 f383 	clz	r3, r3
 80009b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80009c2:	601d      	str	r5, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009c4:	f7ff fdc4 	bl	8000550 <HAL_GetTick>
 80009c8:	4606      	mov	r6, r0
 80009ca:	fa94 f3a4 	rbit	r3, r4
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ce:	680a      	ldr	r2, [r1, #0]
 80009d0:	fa94 f3a4 	rbit	r3, r4
 80009d4:	fab3 f383 	clz	r3, r3
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	fa05 f303 	lsl.w	r3, r5, r3
 80009e0:	4213      	tst	r3, r2
 80009e2:	d1a4      	bne.n	800092e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e4:	f7ff fdb4 	bl	8000550 <HAL_GetTick>
 80009e8:	1b80      	subs	r0, r0, r6
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9ed      	bls.n	80009ca <HAL_RCC_OscConfig+0x46a>
 80009ee:	e61a      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
 80009f0:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009f4:	fab3 f383 	clz	r3, r3
 80009f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a06:	f7ff fda3 	bl	8000550 <HAL_GetTick>
 8000a0a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000a0e:	4606      	mov	r6, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a10:	2501      	movs	r5, #1
 8000a12:	fa94 f3a4 	rbit	r3, r4
 8000a16:	680a      	ldr	r2, [r1, #0]
 8000a18:	fa94 f3a4 	rbit	r3, r4
 8000a1c:	fab3 f383 	clz	r3, r3
 8000a20:	f003 031f 	and.w	r3, r3, #31
 8000a24:	fa05 f303 	lsl.w	r3, r5, r3
 8000a28:	4213      	tst	r3, r2
 8000a2a:	d080      	beq.n	800092e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a2c:	f7ff fd90 	bl	8000550 <HAL_GetTick>
 8000a30:	1b80      	subs	r0, r0, r6
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9ed      	bls.n	8000a12 <HAL_RCC_OscConfig+0x4b2>
 8000a36:	e5f6      	b.n	8000626 <HAL_RCC_OscConfig+0xc6>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a38:	b003      	add	sp, #12
 8000a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a44:	4a4f      	ldr	r2, [pc, #316]	; (8000b84 <HAL_RCC_ClockConfig+0x140>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a50:	4605      	mov	r5, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a52:	d30a      	bcc.n	8000a6a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a54:	6828      	ldr	r0, [r5, #0]
 8000a56:	0784      	lsls	r4, r0, #30
 8000a58:	d513      	bpl.n	8000a82 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a5a:	4c4b      	ldr	r4, [pc, #300]	; (8000b88 <HAL_RCC_ClockConfig+0x144>)
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a62:	68ab      	ldr	r3, [r5, #8]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	6063      	str	r3, [r4, #4]
 8000a68:	e00b      	b.n	8000a82 <HAL_RCC_ClockConfig+0x3e>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	f023 0307 	bic.w	r3, r3, #7
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d0ea      	beq.n	8000a54 <HAL_RCC_ClockConfig+0x10>
    {
      return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a82:	07c2      	lsls	r2, r0, #31
 8000a84:	d406      	bmi.n	8000a94 <HAL_RCC_ClockConfig+0x50>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a86:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <HAL_RCC_ClockConfig+0x140>)
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d356      	bcc.n	8000b40 <HAL_RCC_ClockConfig+0xfc>
 8000a92:	e05f      	b.n	8000b54 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a94:	686a      	ldr	r2, [r5, #4]
 8000a96:	4c3c      	ldr	r4, [pc, #240]	; (8000b88 <HAL_RCC_ClockConfig+0x144>)
 8000a98:	2a01      	cmp	r2, #1
 8000a9a:	d10e      	bne.n	8000aba <HAL_RCC_ClockConfig+0x76>
 8000a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aa0:	fa93 f0a3 	rbit	r0, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aa4:	6820      	ldr	r0, [r4, #0]
 8000aa6:	fa93 f3a3 	rbit	r3, r3
 8000aaa:	fab3 f383 	clz	r3, r3
 8000aae:	f003 031f 	and.w	r3, r3, #31
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	4203      	tst	r3, r0
 8000ab8:	e011      	b.n	8000ade <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aba:	2a02      	cmp	r2, #2
 8000abc:	bf0c      	ite	eq
 8000abe:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ac2:	2302      	movne	r3, #2
 8000ac4:	fa93 f0a3 	rbit	r0, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac8:	6826      	ldr	r6, [r4, #0]
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	fab3 f383 	clz	r3, r3
 8000ad2:	f003 031f 	and.w	r3, r3, #31
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	fa00 f303 	lsl.w	r3, r0, r3
 8000adc:	4233      	tst	r3, r6
 8000ade:	d0ce      	beq.n	8000a7e <HAL_RCC_ClockConfig+0x3a>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ae0:	6863      	ldr	r3, [r4, #4]
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000aea:	f7ff fd31 	bl	8000550 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aee:	686b      	ldr	r3, [r5, #4]
 8000af0:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000af2:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af4:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af8:	d10b      	bne.n	8000b12 <HAL_RCC_ClockConfig+0xce>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000afa:	6863      	ldr	r3, [r4, #4]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d0c0      	beq.n	8000a86 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b04:	f7ff fd24 	bl	8000550 <HAL_GetTick>
 8000b08:	1b80      	subs	r0, r0, r6
 8000b0a:	42b8      	cmp	r0, r7
 8000b0c:	d9f5      	bls.n	8000afa <HAL_RCC_ClockConfig+0xb6>
        {
          return HAL_TIMEOUT;
 8000b0e:	2003      	movs	r0, #3
 8000b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d10f      	bne.n	8000b36 <HAL_RCC_ClockConfig+0xf2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d0b2      	beq.n	8000a86 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b20:	f7ff fd16 	bl	8000550 <HAL_GetTick>
 8000b24:	1b80      	subs	r0, r0, r6
 8000b26:	42b8      	cmp	r0, r7
 8000b28:	d9f5      	bls.n	8000b16 <HAL_RCC_ClockConfig+0xd2>
 8000b2a:	e7f0      	b.n	8000b0e <HAL_RCC_ClockConfig+0xca>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b2c:	f7ff fd10 	bl	8000550 <HAL_GetTick>
 8000b30:	1b80      	subs	r0, r0, r6
 8000b32:	42b8      	cmp	r0, r7
 8000b34:	d8eb      	bhi.n	8000b0e <HAL_RCC_ClockConfig+0xca>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b36:	6863      	ldr	r3, [r4, #4]
 8000b38:	f013 0f0c 	tst.w	r3, #12
 8000b3c:	d1f6      	bne.n	8000b2c <HAL_RCC_ClockConfig+0xe8>
 8000b3e:	e7a2      	b.n	8000a86 <HAL_RCC_ClockConfig+0x42>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b40:	6813      	ldr	r3, [r2, #0]
 8000b42:	f023 0307 	bic.w	r3, r3, #7
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b4a:	6813      	ldr	r3, [r2, #0]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d194      	bne.n	8000a7e <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b54:	6828      	ldr	r0, [r5, #0]
 8000b56:	0743      	lsls	r3, r0, #29
 8000b58:	d506      	bpl.n	8000b68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b5a:	490b      	ldr	r1, [pc, #44]	; (8000b88 <HAL_RCC_ClockConfig+0x144>)
 8000b5c:	684b      	ldr	r3, [r1, #4]
 8000b5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b62:	68eb      	ldr	r3, [r5, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b68:	f010 0008 	ands.w	r0, r0, #8
 8000b6c:	d008      	beq.n	8000b80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_RCC_ClockConfig+0x144>)
 8000b70:	6929      	ldr	r1, [r5, #16]
 8000b72:	6853      	ldr	r3, [r2, #4]
 8000b74:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b7c:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000b7e:	2000      	movs	r0, #0
}
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b90:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000d18 <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b94:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8000d1c <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b9e:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8000ba0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ba2:	9a01      	ldr	r2, [sp, #4]
 8000ba4:	40da      	lsrs	r2, r3
 8000ba6:	f000 80b1 	beq.w	8000d0c <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000baa:	2201      	movs	r2, #1
 8000bac:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 8000bb0:	9a01      	ldr	r2, [sp, #4]
 8000bb2:	ea12 060a 	ands.w	r6, r2, sl
 8000bb6:	f000 80a7 	beq.w	8000d08 <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bba:	684a      	ldr	r2, [r1, #4]
 8000bbc:	f022 0e10 	bic.w	lr, r2, #16
 8000bc0:	f1be 0f02 	cmp.w	lr, #2
 8000bc4:	d114      	bne.n	8000bf0 <HAL_GPIO_Init+0x64>
 8000bc6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000bca:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bce:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000bd2:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bda:	250f      	movs	r5, #15
 8000bdc:	fa05 f50b 	lsl.w	r5, r5, fp
 8000be0:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be4:	690f      	ldr	r7, [r1, #16]
 8000be6:	fa07 f70b 	lsl.w	r7, r7, fp
 8000bea:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8000bec:	f8cc 7020 	str.w	r7, [ip, #32]
 8000bf0:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf4:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf8:	fa07 fc0b 	lsl.w	ip, r7, fp
 8000bfc:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c00:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c02:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c06:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0a:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c10:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000c14:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c16:	d810      	bhi.n	8000c3a <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c18:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c20:	fa07 f70b 	lsl.w	r7, r7, fp
 8000c24:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8000c26:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2a:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c2e:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8000c32:	409d      	lsls	r5, r3
 8000c34:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8000c38:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c3a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3c:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c40:	688d      	ldr	r5, [r1, #8]
 8000c42:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c46:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8000c4a:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4c:	00d5      	lsls	r5, r2, #3
 8000c4e:	d55b      	bpl.n	8000d08 <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000c54:	f045 0501 	orr.w	r5, r5, #1
 8000c58:	f8c8 5018 	str.w	r5, [r8, #24]
 8000c5c:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8000c60:	f023 0e03 	bic.w	lr, r3, #3
 8000c64:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000c68:	f005 0501 	and.w	r5, r5, #1
 8000c6c:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000c70:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c72:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c78:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c80:	270f      	movs	r7, #15
 8000c82:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c86:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c8a:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c8e:	d011      	beq.n	8000cb4 <HAL_GPIO_Init+0x128>
 8000c90:	4f20      	ldr	r7, [pc, #128]	; (8000d14 <HAL_GPIO_Init+0x188>)
 8000c92:	42b8      	cmp	r0, r7
 8000c94:	d010      	beq.n	8000cb8 <HAL_GPIO_Init+0x12c>
 8000c96:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000c9a:	42b8      	cmp	r0, r7
 8000c9c:	d00e      	beq.n	8000cbc <HAL_GPIO_Init+0x130>
 8000c9e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ca2:	42b8      	cmp	r0, r7
 8000ca4:	d00c      	beq.n	8000cc0 <HAL_GPIO_Init+0x134>
 8000ca6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000caa:	42b8      	cmp	r0, r7
 8000cac:	bf14      	ite	ne
 8000cae:	2705      	movne	r7, #5
 8000cb0:	2704      	moveq	r7, #4
 8000cb2:	e006      	b.n	8000cc2 <HAL_GPIO_Init+0x136>
 8000cb4:	2700      	movs	r7, #0
 8000cb6:	e004      	b.n	8000cc2 <HAL_GPIO_Init+0x136>
 8000cb8:	2701      	movs	r7, #1
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x136>
 8000cbc:	2702      	movs	r7, #2
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_Init+0x136>
 8000cc0:	2703      	movs	r7, #3
 8000cc2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cc6:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cca:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cce:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000cd2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000cd8:	bf0c      	ite	eq
 8000cda:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000cdc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cde:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000ce0:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000ce6:	bf0c      	ite	eq
 8000ce8:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000cea:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000cec:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cee:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000cf4:	bf0c      	ite	eq
 8000cf6:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000cf8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000cfa:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000cfc:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfe:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000d00:	bf54      	ite	pl
 8000d02:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000d04:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d06:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8000d08:	3301      	adds	r3, #1
 8000d0a:	e74a      	b.n	8000ba2 <HAL_GPIO_Init+0x16>
  }
}
 8000d0c:	b005      	add	sp, #20
 8000d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400
 8000d18:	40010400 	.word	0x40010400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d20:	b10a      	cbz	r2, 8000d26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	6181      	str	r1, [r0, #24]
 8000d24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	6281      	str	r1, [r0, #40]	; 0x28
 8000d28:	4770      	bx	lr
 8000d2a:	0000      	movs	r0, r0

08000d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d2c:	b530      	push	{r4, r5, lr}
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d2e:	6902      	ldr	r2, [r0, #16]
 8000d30:	6885      	ldr	r5, [r0, #8]
 8000d32:	6801      	ldr	r1, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d34:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d36:	680c      	ldr	r4, [r1, #0]
 8000d38:	4315      	orrs	r5, r2
 8000d3a:	6942      	ldr	r2, [r0, #20]
 8000d3c:	432a      	orrs	r2, r5
 8000d3e:	ea42 0503 	orr.w	r5, r2, r3
 8000d42:	f424 4216 	bic.w	r2, r4, #38400	; 0x9600
 8000d46:	f022 020c 	bic.w	r2, r2, #12
 8000d4a:	432a      	orrs	r2, r5
 8000d4c:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d4e:	684a      	ldr	r2, [r1, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d50:	6985      	ldr	r5, [r0, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d52:	f422 5440 	bic.w	r4, r2, #12288	; 0x3000
 8000d56:	68c2      	ldr	r2, [r0, #12]
 8000d58:	4322      	orrs	r2, r4
 8000d5a:	604a      	str	r2, [r1, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d5c:	688a      	ldr	r2, [r1, #8]
 8000d5e:	6a04      	ldr	r4, [r0, #32]
 8000d60:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8000d64:	432c      	orrs	r4, r5
 8000d66:	4322      	orrs	r2, r4
 8000d68:	608a      	str	r2, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ee0 <UART_SetConfig+0x1b4>)
 8000d6c:	4291      	cmp	r1, r2
 8000d6e:	d10a      	bne.n	8000d86 <UART_SetConfig+0x5a>
 8000d70:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8000d74:	4c5b      	ldr	r4, [pc, #364]	; (8000ee4 <UART_SetConfig+0x1b8>)
 8000d76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d78:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d80:	5ca2      	ldrb	r2, [r4, r2]
 8000d82:	d04b      	beq.n	8000e1c <UART_SetConfig+0xf0>
 8000d84:	e07f      	b.n	8000e86 <UART_SetConfig+0x15a>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d86:	4a58      	ldr	r2, [pc, #352]	; (8000ee8 <UART_SetConfig+0x1bc>)
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d10e      	bne.n	8000daa <UART_SetConfig+0x7e>
 8000d8c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8000d90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d92:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000d96:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000d9a:	d054      	beq.n	8000e46 <UART_SetConfig+0x11a>
 8000d9c:	d935      	bls.n	8000e0a <UART_SetConfig+0xde>
 8000d9e:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8000da2:	d058      	beq.n	8000e56 <UART_SetConfig+0x12a>
 8000da4:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8000da8:	e036      	b.n	8000e18 <UART_SetConfig+0xec>
 8000daa:	4a50      	ldr	r2, [pc, #320]	; (8000eec <UART_SetConfig+0x1c0>)
 8000dac:	4291      	cmp	r1, r2
 8000dae:	d10e      	bne.n	8000dce <UART_SetConfig+0xa2>
 8000db0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000db4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000db6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000dba:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000dbe:	d042      	beq.n	8000e46 <UART_SetConfig+0x11a>
 8000dc0:	d923      	bls.n	8000e0a <UART_SetConfig+0xde>
 8000dc2:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8000dc6:	d046      	beq.n	8000e56 <UART_SetConfig+0x12a>
 8000dc8:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000dcc:	e024      	b.n	8000e18 <UART_SetConfig+0xec>
 8000dce:	4a48      	ldr	r2, [pc, #288]	; (8000ef0 <UART_SetConfig+0x1c4>)
 8000dd0:	4291      	cmp	r1, r2
 8000dd2:	d10e      	bne.n	8000df2 <UART_SetConfig+0xc6>
 8000dd4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8000dd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000dda:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8000dde:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8000de2:	d030      	beq.n	8000e46 <UART_SetConfig+0x11a>
 8000de4:	d911      	bls.n	8000e0a <UART_SetConfig+0xde>
 8000de6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000dea:	d034      	beq.n	8000e56 <UART_SetConfig+0x12a>
 8000dec:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000df0:	e012      	b.n	8000e18 <UART_SetConfig+0xec>
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <UART_SetConfig+0x1c8>)
 8000df4:	4291      	cmp	r1, r2
 8000df6:	d13a      	bne.n	8000e6e <UART_SetConfig+0x142>
 8000df8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8000dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000dfe:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8000e02:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8000e06:	d01e      	beq.n	8000e46 <UART_SetConfig+0x11a>
 8000e08:	d801      	bhi.n	8000e0e <UART_SetConfig+0xe2>
 8000e0a:	b1e2      	cbz	r2, 8000e46 <UART_SetConfig+0x11a>
 8000e0c:	e02f      	b.n	8000e6e <UART_SetConfig+0x142>
 8000e0e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8000e12:	d020      	beq.n	8000e56 <UART_SetConfig+0x12a>
 8000e14:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8000e18:	d009      	beq.n	8000e2e <UART_SetConfig+0x102>
 8000e1a:	e028      	b.n	8000e6e <UART_SetConfig+0x142>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8000e1c:	2a08      	cmp	r2, #8
 8000e1e:	d829      	bhi.n	8000e74 <UART_SetConfig+0x148>
 8000e20:	e8df f002 	tbb	[pc, r2]
 8000e24:	28081414 	.word	0x28081414
 8000e28:	28282814 	.word	0x28282814
 8000e2c:	1c          	.byte	0x1c
 8000e2d:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e32:	d13b      	bne.n	8000eac <UART_SetConfig+0x180>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000e34:	6840      	ldr	r0, [r0, #4]
 8000e36:	0842      	lsrs	r2, r0, #1
 8000e38:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8000e3c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8000e40:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e44:	e010      	b.n	8000e68 <UART_SetConfig+0x13c>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e4a:	d138      	bne.n	8000ebe <UART_SetConfig+0x192>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e4c:	6842      	ldr	r2, [r0, #4]
 8000e4e:	0853      	lsrs	r3, r2, #1
 8000e50:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8000e54:	e006      	b.n	8000e64 <UART_SetConfig+0x138>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e5a:	d135      	bne.n	8000ec8 <UART_SetConfig+0x19c>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e5c:	6842      	ldr	r2, [r0, #4]
 8000e5e:	0853      	lsrs	r3, r2, #1
 8000e60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e68:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000e6a:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
 8000e6c:	e004      	b.n	8000e78 <UART_SetConfig+0x14c>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e72:	d133      	bne.n	8000edc <UART_SetConfig+0x1b0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000e74:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8000e76:	2300      	movs	r3, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000e78:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8000e7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8000e86:	2a08      	cmp	r2, #8
 8000e88:	d828      	bhi.n	8000edc <UART_SetConfig+0x1b0>
 8000e8a:	e8df f002 	tbb	[pc, r2]
 8000e8e:	0518      	.short	0x0518
 8000e90:	2718270f 	.word	0x2718270f
 8000e94:	2727      	.short	0x2727
 8000e96:	1d          	.byte	0x1d
 8000e97:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000e98:	6842      	ldr	r2, [r0, #4]
 8000e9a:	0853      	lsrs	r3, r2, #1
 8000e9c:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <UART_SetConfig+0x1b4>)
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	e015      	b.n	8000ed8 <UART_SetConfig+0x1ac>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000eac:	6840      	ldr	r0, [r0, #4]
 8000eae:	0842      	lsrs	r2, r0, #1
 8000eb0:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8000eb4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8000eb8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ebc:	e00a      	b.n	8000ed4 <UART_SetConfig+0x1a8>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000ebe:	6842      	ldr	r2, [r0, #4]
 8000ec0:	0853      	lsrs	r3, r2, #1
 8000ec2:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8000ec6:	e003      	b.n	8000ed0 <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000ec8:	6842      	ldr	r2, [r0, #4]
 8000eca:	0853      	lsrs	r3, r2, #1
 8000ecc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	60cb      	str	r3, [r1, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ed8:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8000eda:	bd30      	pop	{r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000ede:	bd30      	pop	{r4, r5, pc}
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	08001254 	.word	0x08001254
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40004800 	.word	0x40004800
 8000ef0:	40004c00 	.word	0x40004c00
 8000ef4:	40005000 	.word	0x40005000

08000ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	9d06      	ldr	r5, [sp, #24]
 8000efc:	4604      	mov	r4, r0
 8000efe:	4616      	mov	r6, r2
 8000f00:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	69c2      	ldr	r2, [r0, #28]
 8000f06:	ea31 0302 	bics.w	r3, r1, r2
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2201      	moveq	r2, #1
 8000f0e:	2200      	movne	r2, #0
 8000f10:	42b2      	cmp	r2, r6
 8000f12:	d11b      	bne.n	8000f4c <UART_WaitOnFlagUntilTimeout+0x54>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000f14:	1c6b      	adds	r3, r5, #1
 8000f16:	d0f5      	beq.n	8000f04 <UART_WaitOnFlagUntilTimeout+0xc>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f18:	b995      	cbnz	r5, 8000f40 <UART_WaitOnFlagUntilTimeout+0x48>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f22:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000f32:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000f36:	2300      	movs	r3, #0
 8000f38:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f40:	f7ff fb06 	bl	8000550 <HAL_GetTick>
 8000f44:	1bc0      	subs	r0, r0, r7
 8000f46:	4285      	cmp	r5, r0
 8000f48:	d2db      	bcs.n	8000f02 <UART_WaitOnFlagUntilTimeout+0xa>
 8000f4a:	e7e6      	b.n	8000f1a <UART_WaitOnFlagUntilTimeout+0x22>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000f4c:	2000      	movs	r0, #0
}
 8000f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8000f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f52:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f54:	2100      	movs	r1, #0
 8000f56:	66c1      	str	r1, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8000f58:	f7ff fafa 	bl	8000550 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8000f62:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f64:	d404      	bmi.n	8000f70 <UART_CheckIdleState+0x20>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	075b      	lsls	r3, r3, #29
 8000f6c:	d51a      	bpl.n	8000fa4 <UART_CheckIdleState+0x54>
 8000f6e:	e00d      	b.n	8000f8c <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	460a      	mov	r2, r1
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff ffba 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d0ee      	beq.n	8000f66 <UART_CheckIdleState+0x16>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8000f88:	2003      	movs	r0, #3
 8000f8a:	e013      	b.n	8000fb4 <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	462b      	mov	r3, r5
 8000f96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f7ff ffac 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d1f1      	bne.n	8000f88 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8000fa4:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8000fa6:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8000fa8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8000fac:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8000fb0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd30      	pop	{r4, r5, pc}

08000fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fb8:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000fba:	4604      	mov	r4, r0
 8000fbc:	b328      	cbz	r0, 800100a <HAL_UART_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8000fbe:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fc6:	b90b      	cbnz	r3, 8000fcc <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fc8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8000fcc:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fce:	2324      	movs	r3, #36	; 0x24
 8000fd0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff fea5 	bl	8000d2c <UART_SetConfig>
 8000fe2:	2801      	cmp	r0, #1
 8000fe4:	d011      	beq.n	800100a <HAL_UART_Init+0x52>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ff6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8000ffe:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001000:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
}
 8001002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8001006:	f7ff bfa3 	b.w	8000f50 <UART_CheckIdleState>
}
 800100a:	2001      	movs	r0, #1
 800100c:	bd10      	pop	{r4, pc}

0800100e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800100e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001010:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001012:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001016:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001018:	460d      	mov	r5, r1
 800101a:	4604      	mov	r4, r0
 800101c:	4611      	mov	r1, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800101e:	d14b      	bne.n	80010b8 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 8001020:	2d00      	cmp	r5, #0
 8001022:	d047      	beq.n	80010b4 <HAL_UART_Transmit+0xa6>
 8001024:	2a00      	cmp	r2, #0
 8001026:	d045      	beq.n	80010b4 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001028:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800102c:	2b01      	cmp	r3, #1
 800102e:	d043      	beq.n	80010b8 <HAL_UART_Transmit+0xaa>
 8001030:	2301      	movs	r3, #1
 8001032:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800103a:	2321      	movs	r3, #33	; 0x21
 800103c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001040:	f7ff fa86 	bl	8000550 <HAL_GetTick>
 8001044:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8001046:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800104a:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800104e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001052:	b292      	uxth	r2, r2
 8001054:	b302      	cbz	r2, 8001098 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
 8001056:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800105a:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001064:	2200      	movs	r2, #0
 8001066:	4633      	mov	r3, r6
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff ff44 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout>
 8001070:	b108      	cbz	r0, 8001076 <HAL_UART_Transmit+0x68>
      {
        return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e021      	b.n	80010ba <HAL_UART_Transmit+0xac>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001076:	68a3      	ldr	r3, [r4, #8]
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800107e:	d107      	bne.n	8001090 <HAL_UART_Transmit+0x82>
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	b92b      	cbnz	r3, 8001090 <HAL_UART_Transmit+0x82>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001084:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800108c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800108e:	e7de      	b.n	800104e <HAL_UART_Transmit+0x40>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001090:	782b      	ldrb	r3, [r5, #0]
 8001092:	8513      	strh	r3, [r2, #40]	; 0x28
 8001094:	3501      	adds	r5, #1
 8001096:	e7da      	b.n	800104e <HAL_UART_Transmit+0x40>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001098:	9700      	str	r7, [sp, #0]
 800109a:	4633      	mov	r3, r6
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ff2a 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d1e4      	bne.n	8001072 <HAL_UART_Transmit+0x64>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80010a8:	2320      	movs	r3, #32
 80010aa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80010ae:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80010b2:	e002      	b.n	80010ba <HAL_UART_Transmit+0xac>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 80010b4:	2001      	movs	r0, #1
 80010b6:	e000      	b.n	80010ba <HAL_UART_Transmit+0xac>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80010b8:	2002      	movs	r0, #2
  }
}
 80010ba:	b003      	add	sp, #12
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010be <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80010c2:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80010c4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80010c8:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010ca:	460d      	mov	r5, r1
 80010cc:	4604      	mov	r4, r0
 80010ce:	4611      	mov	r1, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80010d0:	d15a      	bne.n	8001188 <HAL_UART_Receive+0xca>
  {
    if((pData == NULL ) || (Size == 0U))
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	d056      	beq.n	8001184 <HAL_UART_Receive+0xc6>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d054      	beq.n	8001184 <HAL_UART_Receive+0xc6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010da:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d052      	beq.n	8001188 <HAL_UART_Receive+0xca>
 80010e2:	2301      	movs	r3, #1
 80010e4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010f4:	2322      	movs	r3, #34	; 0x22
 80010f6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80010fa:	f7ff fa29 	bl	8000550 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80010fe:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8001100:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->Instance->ICR = 0xFFFFFFFF;
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001108:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 800110a:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800110e:	d106      	bne.n	800111e <HAL_UART_Receive+0x60>
 8001110:	6923      	ldr	r3, [r4, #16]
 8001112:	b913      	cbnz	r3, 800111a <HAL_UART_Receive+0x5c>
 8001114:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001118:	e006      	b.n	8001128 <HAL_UART_Receive+0x6a>
 800111a:	23ff      	movs	r3, #255	; 0xff
 800111c:	e004      	b.n	8001128 <HAL_UART_Receive+0x6a>
 800111e:	b92b      	cbnz	r3, 800112c <HAL_UART_Receive+0x6e>
 8001120:	6923      	ldr	r3, [r4, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <HAL_UART_Receive+0x5c>
 8001126:	237f      	movs	r3, #127	; 0x7f
 8001128:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800112c:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001130:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001134:	b280      	uxth	r0, r0
 8001136:	b1f8      	cbz	r0, 8001178 <HAL_UART_Receive+0xba>
    {
      huart->RxXferCount--;
 8001138:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800113c:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 8001140:	3b01      	subs	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001148:	2200      	movs	r2, #0
 800114a:	463b      	mov	r3, r7
 800114c:	2120      	movs	r1, #32
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fed2 	bl	8000ef8 <UART_WaitOnFlagUntilTimeout>
 8001154:	b9d0      	cbnz	r0, 800118c <HAL_UART_Receive+0xce>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001156:	68a3      	ldr	r3, [r4, #8]
 8001158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	d106      	bne.n	800116e <HAL_UART_Receive+0xb0>
 8001160:	6922      	ldr	r2, [r4, #16]
 8001162:	b922      	cbnz	r2, 800116e <HAL_UART_Receive+0xb0>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001164:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001166:	4033      	ands	r3, r6
 8001168:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 800116c:	e7e0      	b.n	8001130 <HAL_UART_Receive+0x72>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800116e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001170:	4033      	ands	r3, r6
 8001172:	702b      	strb	r3, [r5, #0]
 8001174:	3501      	adds	r5, #1
 8001176:	e7db      	b.n	8001130 <HAL_UART_Receive+0x72>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001178:	2320      	movs	r3, #32
 800117a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800117e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001182:	e004      	b.n	800118e <HAL_UART_Receive+0xd0>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8001184:	2001      	movs	r0, #1
 8001186:	e002      	b.n	800118e <HAL_UART_Receive+0xd0>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001188:	2002      	movs	r0, #2
 800118a:	e000      	b.n	800118e <HAL_UART_Receive+0xd0>
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800118e:	b002      	add	sp, #8
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001194 <Reset_Handler>:
 8001194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001196:	e003      	b.n	80011a0 <LoopCopyDataInit>

08001198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 800119a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800119c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800119e:	3104      	adds	r1, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <LoopForever+0x6>)
	ldr	r3, =_edata
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <LoopForever+0xa>)
	adds	r2, r0, r1
 80011a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011a8:	d3f6      	bcc.n	8001198 <CopyDataInit>
	ldr	r2, =_sbss
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <LoopForever+0xe>)
	b	LoopFillZerobss
 80011ac:	e002      	b.n	80011b4 <LoopFillZerobss>

080011ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80011ae:	2300      	movs	r3, #0
 	str  r3, [r2]
 80011b0:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80011b2:	3204      	adds	r2, #4

080011b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <LoopForever+0x12>)
	cmp	r2, r3
 80011b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011b8:	d3f9      	bcc.n	80011ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ba:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80011be:	f000 f80f 	bl	80011e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011c2:	f7ff f845 	bl	8000250 <main>

080011c6 <LoopForever>:

LoopForever:
    b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
 80011c8:	08001260 	.word	0x08001260
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000110 	.word	0x20000110

080011dc <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <BusFault_Handler>
 80011de:	0000      	movs	r0, r0

080011e0 <__libc_init_array>:
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <__libc_init_array+0x3c>)
 80011e4:	4c0e      	ldr	r4, [pc, #56]	; (8001220 <__libc_init_array+0x40>)
 80011e6:	1ae4      	subs	r4, r4, r3
 80011e8:	10a4      	asrs	r4, r4, #2
 80011ea:	2500      	movs	r5, #0
 80011ec:	461e      	mov	r6, r3
 80011ee:	42a5      	cmp	r5, r4
 80011f0:	d004      	beq.n	80011fc <__libc_init_array+0x1c>
 80011f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f6:	4798      	blx	r3
 80011f8:	3501      	adds	r5, #1
 80011fa:	e7f8      	b.n	80011ee <__libc_init_array+0xe>
 80011fc:	f000 f816 	bl	800122c <_init>
 8001200:	4c08      	ldr	r4, [pc, #32]	; (8001224 <__libc_init_array+0x44>)
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <__libc_init_array+0x48>)
 8001204:	1ae4      	subs	r4, r4, r3
 8001206:	10a4      	asrs	r4, r4, #2
 8001208:	2500      	movs	r5, #0
 800120a:	461e      	mov	r6, r3
 800120c:	42a5      	cmp	r5, r4
 800120e:	d004      	beq.n	800121a <__libc_init_array+0x3a>
 8001210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001214:	4798      	blx	r3
 8001216:	3501      	adds	r5, #1
 8001218:	e7f8      	b.n	800120c <__libc_init_array+0x2c>
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	08001258 	.word	0x08001258
 8001220:	08001258 	.word	0x08001258
 8001224:	0800125c 	.word	0x0800125c
 8001228:	08001258 	.word	0x08001258

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
